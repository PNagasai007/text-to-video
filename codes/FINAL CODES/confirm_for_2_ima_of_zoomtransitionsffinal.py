# -*- coding: utf-8 -*-
"""confirm for 2 ima of zoomtransitionsFfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hClJqJY77kzyxrIqUj7WMw-JMBWIR3ve
"""

#stable diffusion and all installations


!pip install invisible_watermark transformers accelerate safetensors
!pip install diffusers
from diffusers import DiffusionPipeline
import torch
!pip install accelerate
# Load the model and set the device to CUDA
pipe = DiffusionPipeline.from_pretrained(
    "stabilityai/stable-diffusion-xl-base-1.0",
    torch_dtype=torch.float16,
    use_safetensors=True,
    variant="fp16"
)
pipe.to("cuda")
!pip install matplotlib
!pip install Image pytesseract
!pip install Image
from PIL import Image

!pip install pydub

#voice generation and deciding frame rate for each prompt

! pip install moviepy
!pip install gTTS

# summarizers
!pip install transformers
from transformers import pipeline
summarizer=pipeline("summarization")

text="""
India vs Afghanistan Live Score Asian Games Final: Ravi Bishnoi, Shahbaz send AFG 5 down in gold medal bout.
The women's team did it, now can the men's team replicate it? Ruturaj Gaikwad would surely believe his side can
win the first-ever gold medal for India in men's cricket. It won't be easy though as they will face an experienced Afghanistan
side in the final today. Led by Gulbadin Naib, Afghanistan stunned Pakistan in the semi-final to advance to their maiden final.
In Mohammad Shahzad, Noor Ali Zadran, and Karim Janat, Zahir Khan and Qais Ahmed, Afghanistan have the most experienced side
in this men's Asian Games. India vs Afghanistan Live Score Asian Games Final India vs Afghanistan Live Score Asian Games Final(PTI)
 India have so far displayed dominant performances on their Asian Games debut in cricket. Remember, the last two times cricket was
 a part of the Games, India did not participate. In this edition, however, the Indian cricketers have set the stage on fire.
 India beat Nepal in the quarterfinal - they had got a direct entry into the last 8 due to their higher rankings.
 Yashasvi Jaiswal scored a century to lead India to 202/4 but the bowlers let Nepal score 179, which would have gone down
 well with coach VVS Laxman. In the semi-final, India came up with a revised strategy and it did wonders.
"""
a=summarizer(text,max_length=100,min_length=50,do_sample=False)
print(a)

print(type(a))
b=a[0]
x=b['summary_text']
print(x)
f=x.split('.')
f.pop()
f

y=f

# print(type(a))
# b=a[0]
# x=b['summary_text']
# print(x)
y=[' Dasara Shopping Bonanza festival launched in Hyderabad.', ' Festival held between October 9-18.', ' Lighting of lamp ceremony at Kun Hyundai showroom marks the launch.', ' Participants include Raman Bhatia, Zonal Business Head, Hyundai Motor India Ltd (HMIL), Kwan Hee Han, Zonal Co-ordinator, HMIL, etc.', ' Festival aims to provide a platform for shopping during Dasara.', ' Event features discounts, offers, and promotions on various products.', ' Participating dealerships include Kun Hyundai showroom.']
# print(y)

# y.pop()
print(y)
h= ''.join(y)
print(h)

print(len(y))

# iteratively calling function to generate images



images = []
def generate_image(prompt):

    image = pipe(prompt=prompt).images[0]
    return image


for prompt in y:
    for j in range(2):
      generated_image = generate_image(prompt)
      images.append(generated_image)

#list of length of audios
from pydub import AudioSegment
from gtts import gTTS
import time
import random
import math
la=[]
aud=[]
def aa(g):

  timestamp = int(time.time())  # Get the current timestamp
  random_number = random.randint(1, 1000)  # Generate a random number


  text = g
  min_duration = 10
  min_characters = int(min_duration * 1000)
  text = text[:min_characters]
  tts = gTTS(text)
  tts.save(f'output_audio_{timestamp}_{random_number}.mp3')
  output_audio_file = f'output_audio_{timestamp}_{random_number}.mp3'
  audio = AudioSegment.from_mp3(output_audio_file)
  audio_duration_ms = len(audio)
  a=audio_duration_ms / 1000
  aud.append(output_audio_file)
  return a

for i in y:
  x=aa(i)
  la.append(x)
print(la)

print(images)

import os
os.mkdir( os.path.join("/content", "imags"))

import io
import PIL.Image as Image
import os


for i in range(len(images)):
  buffer = io.BytesIO()
  images[i].save(buffer, format='PNG')
  image_bytes = buffer.getvalue()
  with open(f'/content/imags/image{i}.png', 'wb') as f:
    f.write(image_bytes)

imags=[]
for i in range(14):

  imags.append(f"/content/imags/image{i}.png")

print(imags)

print(len(imags))

import time                         #cpu not enough
import random
import moviepy.editor as mp
from moviepy.editor import ImageClip, concatenate_videoclips
import numpy as np
clips = []

def create_zooming_video(image_path, output_path, duration, resolution=(720,480)):
    img = mp.ImageClip(image_path)

    # Calculate the initial and final zoom scales
    initial_zoom = 1.5
    final_zoom = 1.7

    # Calculate the zooming scale for each frame
    zoom_scales = [initial_zoom + (final_zoom - initial_zoom) * t / (duration * 30) for t in range(int(duration * 30))]

    # Calculate the dimensions for the cropped image
    cropped_width = resolution[0] / final_zoom
    cropped_height = resolution[1] / final_zoom

    # Resize the image to fit the cropped dimensions
    img = img.resize((int(cropped_width), int(cropped_height)))

    # Create a list to hold each frame of the zooming animation
    zooming_frames = []

    for scale in zoom_scales:
        frame = img.resize(scale)
        frame = frame.set_position(("center", "center"))
        frame = frame.set_duration(1 / 30)  # Each frame lasts 1/30 seconds
        zooming_frames.append(frame)

    # Create the zooming animation clip
    zooming_clip = concatenate_videoclips(zooming_frames, method="compose")

    # Calculate position to keep the zoomed image centered
    position = ("center", "center")
    zooming_clip = zooming_clip.set_position(position)
    zooming_clip = zooming_clip.set_duration(duration)
    zooming_clip = zooming_clip.set_fps(30)
    zooming_clip.write_videofile(output_path, codec="libx264")
    clips.append(zooming_clip)

# Assuming you have defined images and la
k=0;
for i in range(len(la)):
  for j in range(k,k+2):
    timestamp = int(time.time())  # Get the current timestamp
    random_number = random.randint(1, 10)  # Generate a random number
    output_video = f'output_video_{timestamp}_{random_number}.mp4'
    create_zooming_video(imags[j], output_video, la[i]/2)
  k=j+1

# Concatenate the video clips
video_clip = concatenate_videoclips(clips, method='compose')

# Write the video to a file
video_clip.write_videofile("video-output.mp4", fps=24, remove_temp=True, codec="libx264", audio_codec="aac")









#final video length
from moviepy.editor import VideoFileClip

# Load the video clip
video_clip = VideoFileClip("video-output.mp4")

# Get the duration of the video in seconds
video_duration_seconds = video_clip.duration

print(f"Video duration: {video_duration_seconds} seconds")
vl=int(video_duration_seconds)

from pydub import AudioSegment #concatenate aud

# Create an empty AudioSegment to store the concatenated audio
combined_audio = AudioSegment.empty()

# List of audio file paths to concatenate


# Iterate through the list and concatenate the audio files
for audio_file in aud:
    audio_segment = AudioSegment.from_file(audio_file)
    combined_audio += audio_segment

# Export the concatenated audio
combined_audio.export("output.mp3", format="mp3")
print(len(combined_audio))

import cv2
import numpy as np
from PIL import Image
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip, AudioFileClip
from moviepy.audio.fx import audio_fadein
video_clip = VideoFileClip("video-output.mp4")
audio_clip = AudioFileClip("output.mp3")
audio_clip = audio_clip.subclip(0, video_clip.duration)
video_clip = video_clip.set_audio(audio_clip)
output_video_with_audio = "ffinal.mp4"
video_clip.write_videofile(output_video_with_audio, codec='libx264', fps=24)